#pragma once
#include <Windows.h>
#include <string>
#include <iostream>
#include <algorithm>
#include <vector>
#include <fstream>
#include <istream>
#include <iterator>
#include <sstream>

#include "LuaC.h"

std::string LocalPlayerName; //Used In GetPlayers From Arguments Function


inline std::vector<std::string> GetPlayersFromArguments(std::string InputArg) {
	std::vector<std::string> CandidatePlayers;
	if (InputArg.size() > 0) {
		if (InputArg == "me" || InputArg == "localplayer") {
			CandidatePlayers.push_back(LocalPlayerName);
		}
		else if (InputArg == "all" || InputArg == "everyone") {
			r_l_getglobal(lua_State, "game");
			r_l_getfield(lua_State, -1, "Players");
			r_l_getfield(lua_State, -1, "GetChilderen");
			r_l_pushvalue(lua_State, -2);
			r_l_pcall(lua_State, 1, 1, 0);
			r_l_pushnil(lua_State);
			while (r_l_next(lua_State, -2) != 0)
			{
				r_l_getfield(lua_State, -1, "Name");
				std::string CurrentPlayerName = r_l_tostring(lua_State, -1);
				r_l_pop(lua_State, 2);
				CandidatePlayers.push_back(CurrentPlayerName);
			}
		}
		else if (InputArg == "others") {
			r_l_getglobal(lua_State, "game");
			r_l_getfield(lua_State, -1, "Players");
			r_l_getfield(lua_State, -1, "GetChilderen");
			r_l_pushvalue(lua_State, -2);
			r_l_pcall(lua_State, 1, 1, 0);
			r_l_pushnil(lua_State);
			while (r_l_next(lua_State, -2) != 0)
			{
				r_l_getfield(lua_State, -1, "Name");
				std::string CurrentPlayerName = r_l_tostring(lua_State, -1);
				r_l_pop(lua_State, 2);
				CandidatePlayers.push_back(CurrentPlayerName);
			}
			//Disgusting Way Of Doing 'Others', Could Have Used strcmp
			std::vector<std::string>::iterator PlayerIteration = find(CandidatePlayers.begin(), CandidatePlayers.end(), LocalPlayerName);
			CandidatePlayers.erase(PlayerIteration);
		}
		else if (InputArg == "random") {
			r_l_getglobal(lua_State, "game");
			r_l_getfield(lua_State, -1, "Players");
			r_l_getfield(lua_State, -1, "GetChilderen");
			r_l_pushvalue(lua_State, -2);
			r_l_pcall(lua_State, 1, 1, 0);
			r_l_pushnil(lua_State);
			while (r_l_next(lua_State, -2) != 0)
			{
				r_l_getfield(lua_State, -1, "Name");
				std::string CurrentPlayerName = r_l_tostring(lua_State, -1);
				r_l_pop(lua_State, 2);
				CandidatePlayers.push_back(CurrentPlayerName);
			}
			srand(time(0));
			int RandInt = rand() % CandidatePlayers.size();
			std::string TheUnluckySod = CandidatePlayers[RandInt];
			CandidatePlayers.clear();
			CandidatePlayers.push_back(TheUnluckySod);
		}
		else if (InputArg == "guests") {
			r_l_getglobal(lua_State, "game");
			r_l_getfield(lua_State, -1, "Players");
			r_l_getfield(lua_State, -1, "GetChilderen");
			r_l_pushvalue(lua_State, -2);
			r_l_pcall(lua_State, 1, 1, 0);
			r_l_pushnil(lua_State);
			while (r_l_next(lua_State, -2) != 0)
			{
				r_l_getfield(lua_State, -1, "Name");
				std::string CurrentPlayerName = r_l_tostring(lua_State, -1);
				r_l_pop(lua_State, 2);
				if (CurrentPlayerName.find("Guest ") != std::string::npos) {
					CandidatePlayers.push_back(CurrentPlayerName);
				}
			}
		}
		else {
			std::vector<std::string> PlayerInteration;
			r_l_getglobal(lua_State, "game");
			r_l_getfield(lua_State, -1, "Players");
			r_l_getfield(lua_State, -1, "GetChilderen");
			r_l_pushvalue(lua_State, -2);
			r_l_pcall(lua_State, 1, 1, 0);
			r_l_pushnil(lua_State);
			while (r_l_next(lua_State, -2) != 0)
			{
				r_l_getfield(lua_State, -1, "Name");
				std::string CurrentPlayerName = r_l_tostring(lua_State, -1);
				r_l_pop(lua_State, 2);
				PlayerInteration.push_back(CurrentPlayerName);
			}
			for (DWORD i = 0; i < PlayerInteration.size(); ++i) {
				std::string PlayerName = PlayerInteration[i];
				std::transform(PlayerName.begin(), PlayerName.end(), PlayerName.begin(), tolower);
				std::string ShortName = PlayerName.substr(0, InputArg.size());
				if (ShortName == InputArg) {
					CandidatePlayers.push_back(PlayerInteration[i]);
				}
			}
		}
	}
	return CandidatePlayers;
}

void RunCommand(std::string CMDINPUTARG) {
	if (CMDINPUTARG.size() == 0) {
		return;
	}

	std::vector<std::string> cmd = SplitArguments(CMDINPUTARG);
	std::vector<std::string> Players = GetPlayersFromArguments(cmd.at(1));

	if (Players.size() == 0) {
		return;
	}


	/*Begin Commands Here*/
	

	if (cmd.at(0) == "kill") {
		for (int i = 0; i < Players.size(); ++i) {
			std::string CurrentPlayerIteration = Players[i];
			r_l_getservice(lua_State, "Players");
			r_l_getfield(lua_State, -1, CurrentPlayerIteration.c_str());
			r_l_getfield(lua_State, -1, "Character");
			r_l_getfield(lua_State, -1, "Humanoid");
			r_l_pushnumber(lua_State, NULL);
			r_l_setfield(lua_State, -2, "Health");
			r_l_emptystack(lua_State);
		}
	}


	else if (cmd.at(0) == "ff" || cmd.at(0) == "forcefield") {
		for (int i = 0; i <	Players.size(); ++i) {
			std::string CurrentPlayerIteration = Players[i];
			r_l_getservice(lua_State, "Players");
			r_l_getfield(lua_State, -1, CurrentPlayerIteration.c_str());
			r_l_getfield(lua_State, -1, "Character");
			r_l_getglobal(lua_State, "Instance");
			r_l_getfield(lua_State, -1, "new");
			r_l_pushstring(lua_State, "ForceField");
			r_l_pushvalue(lua_State, -4);
			r_l_pcall(lua_State, 2, 0, 0);
			r_l_emptystack(lua_State);
		}
	}

	else
	{
		printf("Please Enter A Valid Command!\n");
		return;
	}
}


