#include <Windows.h>
#include <string>
#include <iostream>
#include <conio.h>
#include <TlHelp32.h>
#include <Psapi.h>

#include "Offsets.h"
#include "RunCommand.h"
#include "LuaC.h"

//Chat Hook Function

int GetChatMessage(DWORD luaState) {
	std::string chatMsg = r_l_tostring(luaState, 1);
	if (chatMsg.substr(0, 1) == ";") {
		chatMsg = chatMsg.substr(1, std::string::npos);
		r_l_getglobal(lua_State, "print");
		r_l_pushstring(lua_State, chatMsg.c_str());
		r_l_pcall(lua_State, 1, 0, 0);
		RunCommand(chatMsg);
		return 0;
	}
}

//Console Bypass

void ConsoleBypass(const char* Title) {
	DWORD aaaa;
	VirtualProtect((PVOID)&FreeConsole, 1, PAGE_EXECUTE_READWRITE, &aaaa);
	*(BYTE*)(&FreeConsole) = 0xC3;
	AllocConsole();
	SetConsoleTitleA(Title);
	freopen("CONOUT$", "w", stdout);
	freopen("CONIN$", "r", stdin);
	HWND ConsoleHandle = GetConsoleWindow();
	::SetWindowPos(ConsoleHandle, HWND_TOPMOST, 0, 0, 0, 0, SWP_DRAWFRAME | SWP_NOMOVE | SWP_NOSIZE | SWP_SHOWWINDOW);
	::ShowWindow(ConsoleHandle, SW_NORMAL);
}


namespace Memory {
	///////////////
	// ScriptContext Scanner, Pretty Damn Fast
	// Credits To ASDF
	///////////////

	bool compare(BYTE* address, BYTE* pattern, BYTE* mask) {
		for (; *mask; address++, pattern++, mask++) {
			if (*mask == 'x' && *address != *pattern) {
				return false;
			}
		}
		return true;
	}

	DWORD Scan(BYTE* aob, BYTE* mask, BYTE prot = (PAGE_READONLY | PAGE_READWRITE | PAGE_WRITECOPY | PAGE_EXECUTE | PAGE_EXECUTE_READ | PAGE_EXECUTE_READWRITE | PAGE_EXECUTE_WRITECOPY)) {
		MEMORY_BASIC_INFORMATION mbi;
		DWORD j = (DWORD)GetModuleHandle(NULL);
		while (j < 0x7FFFFFFF && VirtualQuery((void*)j, &mbi, sizeof(mbi))) {
			if (!(mbi.Protect & PAGE_GUARD) && (mbi.State & MEM_COMMIT) && (mbi.Protect & prot)) {
				for (DWORD k = (DWORD)mbi.BaseAddress; k < ((DWORD)mbi.BaseAddress + mbi.RegionSize); ++k) {
					if (compare((BYTE*)k, (BYTE*)aob, (BYTE*)mask)) {
						return k;
					}
				}
			}
			j += mbi.RegionSize;
		}
		return 0;
	}
	///////////////
}




//Main Init Function


void MainInit() {
	ConsoleBypass("Educational Exploit V2 - By Ringarang");
	
	std::cout << "Scanning... ";

	ScriptContext = Memory::Scan((BYTE*)&ScriptContextVFT_Addy, (BYTE*)"xxxx", PAGE_READWRITE);
	if (!ScriptContext) {
		printf("ScriptContext Scan Failed!\n");
		system("pause");
		exit(0);
	}

	int v39 = ScriptContext;
	int v51 = 1;
	lua_State = *(DWORD *)(v39 + 56 * v51 + 164) - (v39 + 56 * v51 + 164);


	std::cout << "Success!\n";

	std::cout << "Setting Up The Exploit... ";

	EnableInt3BPHandler();

	r_l_getfield(lua_State, -10002, "game");
	r_l_getfield(lua_State, -1, "Players");
	r_l_getfield(lua_State, -1, "LocalPlayer");
	r_l_getfield(lua_State, -1, "Chatted");
	r_l_getfield(lua_State, -1, "connect");
	r_l_pushvalue(lua_State, -2);
	PushCClosureBP(GetChatMessage, 1);
	r_l_pcall(lua_State, 2, 0, 0);
	r_l_emptystack(lua_State);
	
	r_l_getglobal(lua_State, "game");
	r_l_getfield(lua_State, -1, "Players");
	r_l_getfield(lua_State, -1, "LocalPlayer");
	r_l_getfield(lua_State, -1, "Name");
	LocalPlayerName = r_l_tostring(lua_State, -1);
	r_l_emptystack(lua_State);

	std::cout << "Success!\n";

	std::cout << "Done! Welcome, " << LocalPlayerName << "! Run ';cmds' In The Roblox Chat For A List Of Commands!\n";

	std::cout << "P.S : Ringarang never released this, and he gave permission to!\n";
}


BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
{
	if (fdwReason == DLL_PROCESS_ATTACH)
	{
		DisableThreadLibraryCalls(hinstDLL);
		CreateThread(0, 0, (LPTHREAD_START_ROUTINE)MainInit, 0, 0, 0);
	}
	return 1;
}